/******************************************************************
Site Name:
Author:

Stylesheet: Grid Stylesheet

I've seperated the grid so you can swap it out easily. It's
called at the top the style.scss stylesheet.

There are a ton of grid solutions out there. You should definitely
experiment with your own. Here are some recommendations:

http://gridsetapp.com - Love this site. Responsive Grids made easy.
http://susy.oddbird.net/ - Grids using Compass. Very elegant.
http://gridpak.com/ - Create your own responsive grid.

The grid below is a combination of the 1140 grid and Twitter Boostrap. 
I liked 1140 but Boostrap's grid was way more detailed so I merged them 
together, let's see how this works out. If you want to use 1140, the original 
values are commented out on each line.

******************************************************************/


$gutter: 100% / 36.2;
$gutter_em: 1em;

// This calculate the gutter
@function grid_width($n, $use_calc: false) {
	$divisor: 12 / $n;
	@if ($use_calc) {
		$gutter_offset: $gutter_em * ($divisor - 1);
		@return calc((100% - #{$gutter_offset}) / #{$divisor});
	}
	@else {
		@return (100% - $gutter * ($divisor - 1)) / $divisor;
	}
}

// Each number here becomes a grid: onecol, twocol etc. 
$grids: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve;
$i: 1;
@each $grid in $grids {
	.#{$grid}col {
		width: grid_width( $i );
		width: grid_width( $i, true );
	}
	$i: $i + 1;
}

// This then collates these classes into one class to apply the gutter
$classes: ();
@each $grid in $grids {
    $classes: join($classes, unquote(".#{$grid}col"), comma);
}

#{$classes} {
  position: relative;
  float: left;
  margin-left: $gutter;
  margin-left: calc(#{$gutter_em} * 1);
}

.first { margin-left: 0; }
.last { float: right; }


.alert,
.article-header .byline,
.footer p,
.entry-content p,
.entry-content ul,
form p, h1, h2, h3, h4, h5, h6,
.article-footer {
  padding: 0 $slab;
}
.entry-content ul {
  padding-left: $slab * 5;
}