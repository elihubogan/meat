/******************************************************************
Site Name: 
Author: 

Stylesheet: Mixins & Constants Stylesheet

This is where you can take advantage of Sass' great features:
Mixins & Constants. I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

******************************************************************/

@import 'bourbon';

/*********************
CLEARFIXIN'
*********************/

// Contain floats: nicolasgallagher.com/micro-clearfix-hack/
.clearfix {
  zoom: 1;
	&:before, &:after { content: ""; display: table; }
	&:after { clear: both; }
}

// A Meatier Clearfix: You won't need to put clearfix class everywhere.
// However, i've foudn taht this way of doing things gets messy. It's
// easier to know what you're adding to your HTML rather than
// clearfixing everything in the scss

@mixin clearfix {
  zoom: 1;
	&:before, &:after { content: ""; display: table; }
	&:after { clear: both; }
}

/********************
meat Mixin scss (migrated to keep mixins and styles separate)
********************/
// text alignment
.text-left   { text-align: left; }
.text-center { text-align: center; }
.text-right  { text-align: right; }



/*********************
TOOLS
*********************/

// BORDER-BOX ALL THE THINGS! (http://paulirish.com/2012/box-sizing-border-box-ftw/)
* {
	-webkit-box-sizing: border-box;
	-moz-box-sizing:    border-box;
	box-sizing:         border-box;
}

// http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
.image-replacement {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}


/*********************
COLORS
Need help w/ choosing your colors? Try this site out:
http://0to255.com/
*********************/

@import "colours";

/*
Here's a great tutorial on how to
use color variables properly:
http://sachagreif.com/sass-color-variables/
*/


/*********************
TYPOGRAPHY
*********************/

$copy:				"Lato", sans-serif;
$slab-serif:		"jubilat",sans-serif;
$sans-serif:        "Helvetica Neue", Helvetica, Arial, sans-serif;
$serif:             "Georgia", Cambria, Times New Roman, Times, serif;


/* 	To embed your own fonts, use this syntax
	and place your fonts inside the
	library/fonts folder. For more information
	on embedding fonts, go to:
	http://www.fontsquirrel.com/
	Be sure to remove the comment brackets.
*/

/*	@font-face {
    	font-family: 'Font Name';
    	src: url('library/fonts/font-name.eot');
    	src: url('library/fonts/font-name.eot?#iefix') format('embedded-opentype'),
             url('library/fonts/font-name.woff') format('woff'),
             url('library/fonts/font-name.ttf') format('truetype'),
             url('library/fonts/font-name.svg#font-name') format('svg');
    	font-weight: normal;
    	font-style: normal;
	}
*/

/*
use the best ampersand
http://simplebits.com/notebook/2008/08/14/ampersands-2/
*/
span.amp {
  font-family: Baskerville,'Goudy Old Style',Palatino,'Book Antiqua',serif !important;
  font-style: italic;
}


/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit",  "");
  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }

  transition: $transition;
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}

// A function to strip unit type from numbers
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// A mixin to remify a property
@mixin rem($prop, $data) {
  $len: length($data);

  $px_list: null;
  // Make a list of px values
  @for $i from 1 through $len {
    $item: nth($data, $i);
    @if type-of($item) == number and unit($item) != "px" {
      $item: strip-units($item * 16) + px;
    }
    $px_list: append(#{$px_list}, $item);
  }

  $rem_list: null;
  // Make a list of rem values
  @for $i from 1 through $len {
    $item: nth($data, $i);
    // Go through each item in the list
    // to apply rem sizing, but only for numbers
    @if type-of($item) == number {
      $divisor: 1;
      @if unit($item) == "px" {
        $divisor: 16;
      }
      // Set item to rem
      $item: strip-units($item / $divisor) + rem;
    }
    $rem_list: append($rem_list, $item);
  }
  // Output the results
  #{$prop}: $px_list;
  #{$prop}: $rem_list;
}
// This is for website rem to PX
// so you can use @include font-size(2);
// which outputs font-size: 24px; font-size:2rem;
@mixin font-size($size: 1) {
  @include rem(font-size, $size);
}
// Shortcuts for various properties
@mixin margin($list)         { @include rem(margin,         $list); }
@mixin margin-top($list)     { @include rem(margin-top,     $list); }
@mixin margin-left($list)    { @include rem(margin-left,    $list); }
@mixin margin-right($list)   { @include rem(margin-right,   $list); }
@mixin margin-bottom($list)  { @include rem(margin-bottom,  $list); }
@mixin padding($list)        { @include rem(padding,        $list); }
@mixin padding-top($list)    { @include rem(padding-top,    $list); }
@mixin padding-left($list)   { @include rem(padding-left,   $list); }
@mixin padding-right($list)  { @include rem(padding-right,  $list); }
@mixin padding-bottom($list) { @include rem(padding-bottom, $list); }

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin bg($color) {
	// do some clever maths to determine if we
	// should go brighter or darker
	$brightness: lightness($color);
	background-color: $color;

	@if ($brightness > 50%) {
		&:hover, &:focus {
			background-color: darken($color, 10%);
		}
	} @else {
		&:hover, &:focus {
			background-color: lighten($color, 10%);
		}
	}
}


// alerts and notices
%alert {
	@include padding(0.5 1);
	border: 1px solid;
}

.alert-help {
	@extend %alert;
	border-color: darken($alert-yellow, 5%);
	background: $alert-yellow;
}

.alert-info {
	@extend %alert;
	border-color: darken($alert-blue, 5%);
	background: $alert-blue;
}

.alert-error {
	@extend %alert;
	border-color: darken($alert-red, 5%);
	background: $alert-red;
}

.alert-success {
	@extend %alert;
	border-color: darken($alert-green, 5%);
	background: $alert-green;
}